TestCase subclass: #AlgoFixTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixTest methodsFor: 'tests' stamp: 'TK 5/14/2020 15:35'!test09PresupuestoPintoresUsandoRodilloSeleccionaElMasBarato| algoFix alba presupuesto valorEsperado |algoFix := AlgoFix new.algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 1000.algoFix registrarPintorDeRodillo: 'Carlos' conValorHora: 500.alba := algoFix crearPintura: 'alba' conPrecioPorLitro: 100 manosPincel: 1 manosRodillo: 2.valorEsperado := algoFix manoDeObra: 								(5 * 1 * 500 * 2)								masMateriales:								(5 * 5 * 100 * 2).								presupuesto := algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.self assert: (presupuesto responsable) equals: 'Carlos'.self assert: (presupuesto valor) equals: valorEsperado.  ! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test02PresupuestoPintoresUtilizandoPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura	"		"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 450.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(10 "M2" * 2 "horas" * 450 "Precio" * 1 "manos") 		masMateriales: 			(10 "M2" * 4 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test04PresupuestoPintoresUtilizandoRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Eugenio' conValorHora: 130.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 20 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 130 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 20 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test01PresupuestoPintorUtilizaPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda 2 horas en pintar un M2 (metro cuadrado), 	"	"Consumo de material:		- Para pincel cada M2 lleva 4 litros de pintura	"	"Pinturas:		- Alba   requiere '1' mano con pincel y '1' mano con rodillo	"	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:21'!test06PresupuestoPinteoresConPincelUtilizanDiferentesPinturasOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Martin' conValorHora: 500.	algoFix registrarPintorDePincel: 'Sebastian' conValorHora: 600.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 15 conPintura: venier.		valorEsperadoConVenier := algoFix 		manoDeObra: 			(15 "M2" * 2 "horas" * 500 "Precio" * 2 "manos") 		masMateriales: 			(15 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Martin' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:24'!test07PresupuestoPinteoresConPincelUtilizanDiferentesPinturasHacenDescuendoDel50PorcientoEnMoCuandoM2EsMayor40EntoncesOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConAlba |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 600.	algoFix registrarPintorDeRodillo: 'Tomas' conValorHora: 4000.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 55 conPintura: venier.		"El descuento del %50 lo hacen los pintores con pincel!!"	valorEsperadoConAlba := algoFix  		manoDeObra: 			(55 "M2" * 2 "horas" * 500 "Precio" * 2 "manos" * 0.5) 		masMateriales: 			(55 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'TK 5/25/2020 00:23'!test10DosPintoresConMismoCostoDevuelveElPrimeroInsertado| algofix unaPintura presupuesto |algofix := AlgoFix new.unaPintura := algofix crearPintura: 'Test' conPrecioPorLitro: 100 manosPincel: 1 manosRodillo: 1.algofix registrarPintorDePincel: 'Pintor 1' conValorHora: 100.algofix registrarPintorDePincel: 'Pintor 2' conValorHora: 100.presupuesto := algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: unaPintura.self assert: (presupuesto responsable) equals: 'Pintor 1'.self assert: (presupuesto valor) equals: 6000.   ! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:23'!test05PresupuestoPinteoresConPincelRodilloOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 340 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 20 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(20 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(20 "M2" * 4 "litros" * 340 "Precio" * 1 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:23'!test08PresupuestoConTecnicaPincel	| algoFix alba venier presupuesto valorEsperadoConAlba valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Edson' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Pablo' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperadoConAlba := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: venier.	valorEsperadoConVenier := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test03PresupuestoPintorUtilizaRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'running' stamp: 'tomas 5/12/2020 16:14'!setUp	precision := 0.001! !TestCase subclass: #NumeroInvalidoErrorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!NumeroInvalidoErrorTest methodsFor: 'tests' stamp: 'TK 5/25/2020 00:26'!test04CrearPintorConCostoNegativoDevuelveError|algofix|algofix := AlgoFix new.self should: [ algofix registrarPintorDePincel: 'test'  conValorHora: -1 ] raise: NumeroInvalidoError.! !!NumeroInvalidoErrorTest methodsFor: 'tests' stamp: 'TK 5/15/2020 13:18'!test02CrearPinturaConValorNegativoDevuelveErrorself should: [Pintura conNombre: 'T' yCostoLitro: -1  yManosPincel: 1  yManosRodillo: 1 ]raise: NumeroInvalidoError.! !!NumeroInvalidoErrorTest methodsFor: 'tests' stamp: 'TK 5/15/2020 12:55'!test01PedirPresupuestoM2NegativoDevuelveError| unPintor unaPintura|unPintor := PintorPincel conNombre: 'Testcaste' yCosto: 100.unaPintura := Pintura conNombre: 'Test' yCostoLitro: 100  yManosPincel: 1  yManosRodillo: 1. self should: [unPintor calcularCostoConM2: -1 yPintura: unaPintura] raise: NumeroInvalidoError. ! !!NumeroInvalidoErrorTest methodsFor: 'tests' stamp: 'TK 5/16/2020 22:05'!test03PintorConNumeroValidoNoDeberiaDevolverErrorself shouldnt: [PintorPincel conNombre: '' yCosto: 10] raise: NumeroInvalidoError. ! !TestCase subclass: #PintorPincelTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PintorPincelTest methodsFor: 'tests' stamp: 'TK 5/15/2020 12:24'!test02PedirPresupuestoConDosPinturasDiferentesDanDistintosResultados| unPintor unaPintura  otraPintura resultado1 resultado2 |unPintor := PintorPincel conNombre: 'Testcase' yCosto: 100.unaPintura := Pintura conNombre: 'Test' yCostoLitro: 100  yManosPincel: 2  yManosRodillo: 1.otraPintura := Pintura conNombre: 'Test2' yCostoLitro: 500   yManosPincel: 3  yManosRodillo: 1.resultado1 := unPintor calcularCostoConM2: 10 yPintura: unaPintura.resultado2 := unPintor calcularCostoConM2: 10 yPintura: otraPintura.self assert: resultado1 equals: 12000.self assert: resultado2 equals: 66000.   ! !!PintorPincelTest methodsFor: 'tests' stamp: 'TK 5/15/2020 12:31'!test04PedirCostoObraConMas40M2AplicaDescuento|unPintor resultado |unPintor := PintorPincel conNombre: 'Testcase' yCosto: 100.resultado := unPintor costoObra: 50.self assert: resultado equals: 100. ! !!PintorPincelTest methodsFor: 'tests' stamp: 'TK 5/15/2020 12:18'!test01PedirPresupuestoAPintorPincelDevuelveResultadoEsperado| unPintor unaPintura resultado |unPintor := PintorPincel conNombre: 'Testcase' yCosto: 200.unaPintura := Pintura conNombre: 'Test' yCostoLitro: 100  yManosPincel: 1  yManosRodillo: 1.resultado := unPintor calcularCostoConM2: 10 yPintura: unaPintura.self assert: resultado equals: 8000. ! !!PintorPincelTest methodsFor: 'tests' stamp: 'TK 5/15/2020 12:38'!test03PedirPresupuestoParaMasDe40M2AplicaDescuentoDel50Porciento| unPintor unaPintura resultado |unPintor := PintorPincel conNombre: 'Testcase' yCosto: 100.unaPintura := Pintura conNombre: 'Test' yCostoLitro: 100  yManosPincel: 1  yManosRodillo: 1.resultado := unPintor calcularCostoConM2: 50 yPintura: unaPintura.self assert: resultado equals: 25000. ! !!PintorPincelTest methodsFor: 'tests' stamp: 'TK 5/15/2020 12:33'!test05PedirCostoObraDevuelveResultadoEsperado|unPintor resultado |unPintor := PintorPincel conNombre: 'Testcase' yCosto: 100.resultado := unPintor costoObra: 10.self assert: resultado equals: 200.! !TestCase subclass: #PintorRodilloTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PintorRodilloTest methodsFor: 'tests' stamp: 'TK 5/25/2020 00:43'!test03CostoObraDevuelveElValorEsperado| unPintor |unPintor := PintorRodillo conNombre: 'Test' yCosto: 100.self assert: (unPintor costoObra: 10) equals: 100.! !!PintorRodilloTest methodsFor: 'tests' stamp: 'TK 5/14/2020 15:13'!test02DistintasPinturasDanDosPresupuestosDistintos| unPintor unaPintura otraPintura presupuesto1 presupuesto2|unPintor := PintorRodillo conNombre: 'Testcase' yCosto: 200.unaPintura := Pintura conNombre: 'T1' yCostoLitro: 100  yManosPincel: 1  yManosRodillo: 2.otraPintura := Pintura conNombre: 'T2' yCostoLitro: 50  yManosPincel: 1  yManosRodillo: 1.  presupuesto1 := unPintor calcularCostoConM2: 5 yPintura: unaPintura.presupuesto2 := unPintor calcularCostoConM2: 5 yPintura: otraPintura.self assert: presupuesto1 equals: 7000.self assert: presupuesto2 equals: 2250.  ! !!PintorRodilloTest methodsFor: 'tests' stamp: 'TK 5/14/2020 15:06'!test01PedirPresupuestoAPintorRodilloDevuelveValorEsperado|unPintor unaPintura resultado|unPintor := PintorRodillo conNombre: 'Testcase' yCosto: 200.unaPintura := Pintura conNombre: 'Testcase' yCostoLitro: 200 yManosPincel: 1  yManosRodillo: 1.resultado := unPintor calcularCostoConM2: 5 yPintura: unaPintura.self assert: resultado equals: 6000.  ! !TestCase subclass: #PinturaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PinturaTest methodsFor: 'tests' stamp: 'TK 5/25/2020 00:35'!test02PedirCostoPintarRodilloDevuelveValorEsperado|unaPintura|unaPintura := Pintura conNombre: 'test' yCostoLitro: 100  yManosPincel: 1 yManosRodillo: 1.self assert: (unaPintura costoPintarRodillo) equals: 500.! !!PinturaTest methodsFor: 'tests' stamp: 'TK 5/25/2020 00:34'!test01PedirCostoPintarPincelDevuelveValorEsperado|unaPintura|unaPintura := Pintura conNombre: 'test' yCostoLitro: 100  yManosPincel: 1 yManosRodillo: 1.self assert: (unaPintura costoPintarPincel) equals: 400.! !TestCase subclass: #SinPintoresDisponiblesErrorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!SinPintoresDisponiblesErrorTest methodsFor: 'tests' stamp: 'TK 5/25/2020 00:18'!test01PedirPresupuestoSinPintoresDevuelveError| algofix unaPintura|algofix := AlgoFix new.unaPintura := algofix crearPintura: 'Test' conPrecioPorLitro: 1 manosPincel:  1 manosRodillo: 1.self should: [ algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 1 conPintura: unaPintura]raise: SinPintoresDisponiblesError.! !