Object subclass: #AlgoFix	instanceVariableNames: 'pintores'	classVariableNames: ''	package: 'TP1-Modelo'!!AlgoFix methodsFor: 'as yet unclassified' stamp: 'TK 5/25/2020 00:40'!registrarPintorDePincel: unNombre conValorHora: unNumero"unNombre es un String, unNumero es un numero"| unPintor |unPintor := PintorPincel conNombre: unNombre yCosto: unNumero.pintores add: unPintor.! !!AlgoFix methodsFor: 'crearPintor' stamp: 'TK 5/25/2020 00:40'!registrarPintorDeRodillo: unNombre conValorHora: unValor"unNombre es un String, unValor es un numero."| unPintor |unPintor := PintorRodillo conNombre: unNombre yCosto: unValor.pintores add: unPintor.! !!AlgoFix methodsFor: 'presupuestos' stamp: 'TK 5/25/2020 00:41'!manoDeObra: unValor masMateriales: otroValor"unValor y otroValor son numeros"((unValor < 0) | (otroValor < 0)) ifTrue: [ NumeroInvalidoError signal ].^(unValor + otroValor). ! !!AlgoFix methodsFor: 'presupuestos' stamp: 'TK 5/25/2020 00:40'!presupuestoMasBaratoParaPintarMetrosCuadrados: unNumero conPintura: unaPintura"unNumero es un numero, unaPintura es una instancia de la clase Pintura, devuelve el Pintor que presente un presupuesto mas barato con dicha pintura. En caso de que haya dos, devuelve el primero."| unPintor |(pintores isEmpty) ifTrue: [SinPintoresDisponiblesError signal].unPintor := pintores detectMin:  [ :otroPintor | otroPintor calcularCostoConM2: unNumero yPintura: unaPintura].^(Presupuesto conValor: (unPintor calcularCostoConM2: unNumero yPintura: unaPintura ) yNombre: (unPintor getNombre)).! !!AlgoFix methodsFor: 'initalize' stamp: 'TK 5/14/2020 14:41'!initialize pintores := OrderedCollection new.! !!AlgoFix methodsFor: 'crearPintura' stamp: 'TK 5/14/2020 15:21'!crearPintura: unNombre conPrecioPorLitro: unValor  manosPincel: unNumero  manosRodillo: otroNumero^ (Pintura conNombre: unNombre yCostoLitro: unValor  yManosPincel: unNumero  yManosRodillo: otroNumero). ! !Error subclass: #NumeroInvalidoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo'!Object subclass: #Pintor	instanceVariableNames: 'nombre costoHora'	classVariableNames: ''	package: 'TP1-Modelo'!!Pintor methodsFor: 'accesing' stamp: 'TK 5/14/2020 15:25'!getNombre^ nombre.! !!Pintor methodsFor: 'abstract' stamp: 'TK 5/14/2020 14:41'!calcularCostoConM2: unNumero yPintura: unaPinturaself subclassResponsibility.! !!Pintor methodsFor: 'abstract' stamp: 'TK 5/14/2020 14:53'!costoObra: cantidadM2self subclassResponsibility.! !!Pintor methodsFor: 'setter' stamp: 'TK 5/14/2020 14:41'!setCosto: unCostocostoHora := unCosto.! !!Pintor methodsFor: 'setter' stamp: 'TK 5/14/2020 14:41'!setNombre: unNombrenombre := unNombre.! !Pintor subclass: #PintorPincel	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo'!!PintorPincel methodsFor: 'costos' stamp: 'TK 5/15/2020 12:46'!calcularCostoConM2: unNumero yPintura: unaPintura| numero1 numero2 |(unNumero < 0) ifTrue: [ NumeroInvalidoError signal].numero1 := unNumero * (unaPintura getManosPincel).numero2 := ((self costoObra: unNumero) + (unaPintura costoPintarPincel)).^ (numero1 * numero2).! !!PintorPincel methodsFor: 'costos' stamp: 'TK 5/16/2020 21:23'!costoObra: cantidadM2(cantidadM2 < 0) ifTrue: [ NumeroInvalidoError signal ].(cantidadM2 > 40) ifTrue: [ ^ (costoHora * 2 * 0.5) ]. "Aplico un descuento del 50%"^ (costoHora * 2).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PintorPincel class	instanceVariableNames: ''!!PintorPincel class methodsFor: 'initialize' stamp: 'TK 5/16/2020 21:24'!conNombre: unNombre yCosto: unCosto| unPintor |(unCosto < 0) ifTrue: [ NumeroInvalidoError signal ].unPintor := self new.unPintor setNombre: unNombre.unPintor setCosto: unCosto.^ unPintor.! !Pintor subclass: #PintorRodillo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo'!!PintorRodillo methodsFor: 'costos' stamp: 'TK 5/15/2020 13:14'!calcularCostoConM2: unNumero yPintura: unaPintura| numero1 numero2|(unNumero < 0) ifTrue: [ NumeroInvalidoError signal ].numero1 := unNumero * (unaPintura getManosRodillo).numero2 := ((self costoObra: unNumero) + (unaPintura costoPintarRodillo)).^ (numero1 * numero2).! !!PintorRodillo methodsFor: 'costos' stamp: 'TK 5/16/2020 21:23'!costoObra: cantidadM2(cantidadM2 < 0) ifTrue: [ NumeroInvalidoError signal ].^ (costoHora * 1).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PintorRodillo class	instanceVariableNames: ''!!PintorRodillo class methodsFor: 'initialize' stamp: 'TK 5/16/2020 21:24'!conNombre: unNombre yCosto: unCosto| unPintor |(unCosto < 0) ifTrue: [ NumeroInvalidoError signal ].unPintor := self new.unPintor setNombre: unNombre.unPintor setCosto: unCosto.^ unPintor.! !Object subclass: #Pintura	instanceVariableNames: 'nombre costoLitro manosPincel manosRodillo'	classVariableNames: ''	package: 'TP1-Modelo'!!Pintura methodsFor: 'accesing' stamp: 'TK 5/14/2020 14:42'!getManosRodillo^manosRodillo.! !!Pintura methodsFor: 'accesing' stamp: 'TK 5/15/2020 12:08'!getManosPincel^manosPincel.! !!Pintura methodsFor: 'costos' stamp: 'TK 5/15/2020 12:09'!costoPintarPincel^(costoLitro * 4). ! !!Pintura methodsFor: 'costos' stamp: 'TK 5/14/2020 14:53'!costoPintarRodillo^(costoLitro * 5).! !!Pintura methodsFor: 'setter' stamp: 'TK 5/16/2020 21:25'!setCosto: unCosto(unCosto < 0) ifTrue: [ NumeroInvalidoError signal ].costoLitro := unCosto.! !!Pintura methodsFor: 'setter' stamp: 'TK 5/16/2020 21:25'!setManosRodillo: unNumero(unNumero < 0) ifTrue: [ NumeroInvalidoError signal ].manosRodillo := unNumero.! !!Pintura methodsFor: 'setter' stamp: 'TK 5/14/2020 14:42'!setNombre: unNombrenombre := unNombre.! !!Pintura methodsFor: 'setter' stamp: 'TK 5/16/2020 21:25'!setManosPincel: unNumero(unNumero < 0) ifTrue: [ NumeroInvalidoError signal ].manosPincel := unNumero.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pintura class	instanceVariableNames: ''!!Pintura class methodsFor: 'as yet unclassified' stamp: 'TK 5/15/2020 13:15'!conNombre: unNombre yCostoLitro: unCosto yManosPincel: unNumero yManosRodillo: otroNumero| unaPintura |((unCosto < 0) | (unNumero < 0) | (otroNumero < 0)) ifTrue: [ NumeroInvalidoError signal ].unaPintura := self new.unaPintura setNombre: unNombre.unaPintura setCosto: unCosto.unaPintura setManosPincel: unNumero.unaPintura setManosRodillo: otroNumero.^ unaPintura.! !Object subclass: #Presupuesto	instanceVariableNames: 'monto nombre'	classVariableNames: ''	package: 'TP1-Modelo'!!Presupuesto methodsFor: 'accesing' stamp: 'TK 5/14/2020 15:28'!valor^monto.! !!Presupuesto methodsFor: 'accesing' stamp: 'TK 5/14/2020 15:28'!responsable^nombre.! !!Presupuesto methodsFor: 'setter' stamp: 'TK 5/14/2020 15:27'!setMonto: unMonto.monto := unMonto.! !!Presupuesto methodsFor: 'setter' stamp: 'TK 5/14/2020 15:28'!setNombre: unNombrenombre := unNombre.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Presupuesto class	instanceVariableNames: ''!!Presupuesto class methodsFor: 'as yet unclassified' stamp: 'TK 5/14/2020 15:27'!conValor: unValor yNombre: unNombre|unPresupuesto|unPresupuesto := self new.unPresupuesto setMonto: unValor.unPresupuesto setNombre: unNombre.^unPresupuesto.! !Error subclass: #SinPintoresDisponiblesError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Modelo'!